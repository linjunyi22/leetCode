package in

import "slices"

/*
189. 轮转数组
难度：中等
链接：https://leetcode.cn/problems/rotate-array/

给定一个整数数组 nums，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。

示例 1:
输入: nums = [1,2,3,4,5,6,7], k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右轮转 1 步: [7,1,2,3,4,5,6]
向右轮转 2 步: [6,7,1,2,3,4,5]
向右轮转 3 步: [5,6,7,1,2,3,4]

解题思路：
1. 首先对k进行取模，因为轮转len(nums)次相当于没有轮转
2. 使用三次翻转法：
   - 先将整个数组翻转
   - 然后翻转前k个元素
   - 最后翻转剩余的元素

可视化解释：
假设原数组表示为: "----->-->" (其中k=3)
目标结果应该是:  "-->----->"

具体翻转步骤：
1. 整体翻转:     "----->-->" => "<--<-----"
2. 翻转前k个:    "<--<-----" => "--><-----"
3. 翻转后面的:   "--><-----" => "-->----->"

这个可视化帮助理解三次翻转的原理：
- 箭头代表数组的一部分
- 通过三次翻转，我们可以将后面k个元素移到前面
- 每次翻转都保持了元素的相对顺序
*/

func rotate(nums []int, k int) {
	k = k % len(nums)
	slices.Reverse(nums)
	slices.Reverse(nums[:k])
	slices.Reverse(nums[k:])
}
